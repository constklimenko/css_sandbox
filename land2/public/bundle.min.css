@font-face {
  font-family: 'HelveticaNavCyr';
  src: url(fonts/HelveticaNeue-CondensedRegular.woff);
}
@font-face {
  font-family: 'Corinthia';
  src: url('fonts/corinthia.ttf');
}
*,
*::before,
*::after {
  box-sizing: border-box;
}
html {
  font-family: sans-serif;
  line-height: 1.15;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  -ms-overflow-style: scrollbar;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
@-ms-viewport {
  width: device-width;
}
article,
aside,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section {
  display: block;
}
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-size: 1rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  text-align: left;
  background-color: #fff;
}
[tabindex="-1"]:focus {
  outline: 0 !important;
}
hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  margin-top: 0;
  margin-bottom: 0.5rem;
}
p {
  margin-top: 0;
  margin-bottom: 1rem;
}
abbr[title],
abbr[data-original-title] {
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
  cursor: help;
  border-bottom: 0;
}
address {
  margin-bottom: 1rem;
  font-style: normal;
  line-height: inherit;
}
ol,
ul,
dl {
  margin-top: 0;
  margin-bottom: 1rem;
}
ol ol,
ul ul,
ol ul,
ul ol {
  margin-bottom: 0;
}
dt {
  font-weight: 700;
}
dd {
  margin-bottom: 0.5rem;
  margin-left: 0;
}
blockquote {
  margin: 0 0 1rem;
}
dfn {
  font-style: italic;
}
b,
strong {
  font-weight: bolder;
}
small {
  font-size: 80%;
}
sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
a {
  color: #007bff;
  text-decoration: none;
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
}
a:hover {
  color: #0056b3;
  text-decoration: underline;
}
a:not([href]):not([tabindex]) {
  color: inherit;
  text-decoration: none;
}
a:not([href]):not([tabindex]):hover,
a:not([href]):not([tabindex]):focus {
  color: inherit;
  text-decoration: none;
}
a:not([href]):not([tabindex]):focus {
  outline: 0;
}
body {
  font-family: 'HelveticaNavCyr', sans-serif;
}
.header {
  width: 100vw;
  height: 40vw;
  padding-right: calc(50vw - 705px);
  padding-left: calc(50vw - 705px);
  box-sizing: border-box;
  background-image: -webkit-gradient(linear, left top, right top, from(rgba(9, 5, 47, 0.5)), to(rgba(49, 29, 94, 0.5))), url('img/header.jpg');
  background-image: linear-gradient(to right, rgba(9, 5, 47, 0.5) 0%, rgba(49, 29, 94, 0.5) 100%), url('img/header.jpg');
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  color: white;
}
@media (max-width: 1170px) {
  .header {
    padding-left: 30px;
    padding-right: 30px;
  }
}
.header__card {
  width: 75%;
  height: 30vw;
  margin: auto;
  padding-top: 5vw;
  padding-bottom: 5vw;
  background: rgba(0, 0, 0, 0.7);
  -webkit-filter: drop-shadow(0px 0px 3px #eee4aa);
          filter: drop-shadow(0px 0px 3px #eee4aa);
  text-align: center;
}
@media (max-width: 1024px) {
  .header__card {
    width: 90%;
    height: 38vw;
    padding-top: 1vw;
    padding-bottom: 1vw;
    background: rgba(0, 0, 0, 0.5);
  }
}
.header__card__title {
  font-family: 'Corinthia', arial, sans-serif;
  font-size: 16vw;
  font-weight: normal;
  text-transform: capitalize;
}
.header__card__text {
  font-size: 1.92vw;
}
.header__card__small {
  font-size: 1vw;
  margin-top: -4vw;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
